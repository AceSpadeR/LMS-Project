@page
@model LMS.Pages.Account.FeesModel
@{
	ViewData["Title"] = "Fees";
}


@if (TempData["receipt"] != null)
{
    <div class="row justify-content-center">
        <div class="col-md-9">
            <div class="alert alert-dismissible alert-success">
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                <strong>Payment Successful!</strong> Thank you for your payment @Model.LoginUser.FirstName.  <a href="@TempData["receipt"]" class="alert-link" target="_blank">Click here to view your receipt</a>.
            </div>
        </div>
    </div>
}

<h1 class="row justify-content-center">Fees Due: @string.Format("{0:C}", Math.Round(Model.TotalCreditHours))</h1>
<hr />

<div class="row justify-content-center">
    <div class="col-md-4">
        <form id="payment-form"  method="POST">
            <div class="form-group mt-2">
                <label for="card-element" class="control-label">Credit or Debit Card Number</label>
                <div id="card-element" class="form-control">
                    <!-- A Stripe Element will be inserted here. -->
                </div>
                <i><span id="card-errors" class="text-danger small"></span></i>
            </div>
            <div class="form-group mt-2">
                <label for="payment-amount" class="control-label">Payment Amount</label>
                <div class="input-group">
                    <span class="input-group-text">$</span>
                    <input type="text" class="form-control" id="payment-amount" name="paymentAmount">
                </div>
            </div>
            <button type="submit" id="submitButton" class="btn btn-success mt-3 w-100">
                <span id="buttonText"><i class="bi bi-check-lg me-2"></i> Complete Payment</span>
                <span id="loadingSpinner" class="spinner-border spinner-border-sm" style="display: none;"></span>
            </button>
        </form>
    </div>
</div>

@section Scripts
{
    <script src="https://js.stripe.com/v3/"></script>
    <script>
        var stripe = Stripe('pk_test_51OgsLhBWhaZwsKbk0Pys3Yykqw3wfBbJGGGUxzecl1IRlXx4g2HFLtSzKy8PJb3IicAiPDAhiN0HORgkIRsR7jQ700CiGIj2NW');
        var elements = stripe.elements();

        // Custom styling can be passed to options when creating an Element.
        var style = {
            base: {
                fontSize: '16px',
                color: '#32325d',
            },
        };

        // Create an instance of the card Element.
        var card = elements.create('card', {
            style: style,
            hidePostalCode: true // Optionally hide the postal code
        });

        // Add an instance of the card Element into the `card-element` div.
        card.mount('#card-element');

        // Handle real-time validation errors from the card Element.
        card.addEventListener('change', function (event) {
            var displayError = document.getElementById('card-errors');
            if (event.error) {
                displayError.textContent = event.error.message;
            } else {
                displayError.textContent = '';
            }
        });

        // Handle form submission.
        var form = document.getElementById('payment-form');
        form.addEventListener('submit', function (event) {
            event.preventDefault();

            var paymentInfo = parseFloat(document.getElementById("payment-amount").value);
            var submitButton = document.getElementById('submitButton');
            var loadingSpinner = document.getElementById('loadingSpinner');

            submitButton.disabled = true;
            loadingSpinner.style.display = ''; // Show the spinner
            document.getElementById('buttonText').style.display = 'none'; // Hide the button text

            // Simulate form submission delay (replace this with your actual form submission code)
            var timer = setTimeout(function () {
                // Enable the button after a short delay (e.g., 5 seconds)
                submitButton.disabled = false;
                loadingSpinner.style.display = 'none'; // Hide the spinner
                document.getElementById('buttonText').style.display = ''; // Show the button text
            }, 5000);

            stripe.createToken(card).then(function (result) {
                if (result.error) {
                    clearTimeout(timer); // Clear the timer
                    // Reset button and spinner states
                    submitButton.disabled = false;
                    loadingSpinner.style.display = 'none'; // Hide the spinner
                    document.getElementById('buttonText').style.display = '';

                    // Inform the user if there was an error.
                    var errorElement = document.getElementById('card-errors');
                    errorElement.textContent = result.error.message;
                } else {
                    // Send the token to your server.
                    stripeTokenHandler(result.token, paymentInfo);
                }
            });

        });

        var payInput = document.getElementById('payment-amount');
        var submitButton = document.getElementById('submitButton');
        submitButton.disabled = payInput.value.trim() === "";

        payInput.addEventListener('input', function (event) {
    
            var value = event.target.value;

            if (isNaN(parseFloat(value))) {
                event.target.value = "";
            }

            if (@Model.TotalCreditHours < value || value < 0) {
                event.target.value = "";
            }

            submitButton.disabled = event.target.value === "";
        });

        // Submit the form with the token ID.
        function stripeTokenHandler(token, paymentAmount) {
            // Insert the token ID into the form so it gets submitted to the server
            var form = document.getElementById('payment-form');
            var hiddenInput = document.createElement('input');
            hiddenInput.setAttribute('type', 'hidden');
            hiddenInput.setAttribute('name', 'stripeToken');
            hiddenInput.setAttribute('value', token.id);
            form.appendChild(hiddenInput);

            // Submit the form
            form.submit();
        }

    </script>

    
}

